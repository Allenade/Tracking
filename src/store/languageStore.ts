import { create } from "zustand";
import { persist } from "zustand/middleware";

export interface Language {
  code: string;
  name: string;
  flag: string;
}

export const languages: Language[] = [
  { code: "EN", name: "English", flag: "ðŸ‡ºðŸ‡¸" },
  { code: "ES", name: "EspaÃ±ol", flag: "ðŸ‡ªðŸ‡¸" },
  { code: "FR", name: "FranÃ§ais", flag: "ðŸ‡«ðŸ‡·" },
  { code: "DE", name: "Deutsch", flag: "ðŸ‡©ðŸ‡ª" },
  { code: "IT", name: "Italiano", flag: "ðŸ‡®ðŸ‡¹" },
  { code: "PT", name: "PortuguÃªs", flag: "ðŸ‡µðŸ‡¹" },
  { code: "NL", name: "Nederlands", flag: "ðŸ‡³ðŸ‡±" },
  { code: "VI", name: "Tiáº¿ng Viá»‡t", flag: "ðŸ‡»ðŸ‡³" },
  { code: "ZH", name: "ä¸­æ–‡", flag: "ðŸ‡¨ðŸ‡³" },
  { code: "JA", name: "æ—¥æœ¬èªž", flag: "ðŸ‡¯ðŸ‡µ" },
];

interface LanguageStore {
  currentLanguage: Language;
  setLanguage: (language: Language) => void;
  getLanguage: () => Language;
}

export const useLanguageStore = create<LanguageStore>()(
  persist(
    (set, get) => ({
      currentLanguage: languages[0], // Default to English
      setLanguage: (language: Language) => set({ currentLanguage: language }),
      getLanguage: () => get().currentLanguage,
    }),
    {
      name: "language-storage", // unique name for localStorage key
    }
  )
);
